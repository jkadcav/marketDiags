source('~/Documents/xtrade/marketDiags/R/marketDiagnostics.R')
library("packrat", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
packrat::init()
library(marketDiags)
library(marketDiags)
library(marketDiags)
library(marketDiags)
library(RPostgreSQL)
install.packages('RPostgreSQL')
library(marketDiags)
library(marketDiags)
library(marketDiags)
param<-c('crownbet','sportsbet','luxbet','2016-02-01','2017-03-01','Moonee Valley','Australia')
marketDiags::masterDiagnostics(params)
marketDiags::masterDiagnostics(param)
library(marketDiags)
param<-c('crownbet','sportsbet','luxbet','2016-02-01','2017-03-01','Moonee Valley','Australia')
marketDiags::masterDiagnostics(param)
marketDiags::masterDiagnostics(param)
library(marketDiags)
library(marketDiags)
params<-c('tab_vic','citibet','ladbrokes','2016-03-01','2017-04-01','Addington','New Zealand','GREYHOUND')
marketDiags::masterDiagnostics(params)
params<-c('tab_vic','citibet','ladbrokes','2016-03-01','2017-04-01','Happy Valley','Hong Kong','THOROUGHBRED')
marketDiags::masterDiagnostics(params)
params<-c('tab_vic','citibet','ladbrokes','2016-03-01','2017-04-01','Sha Tin','Hong Kong','Thoroughbred',1)
library(marketDiags)
params
marketDiags::masterDiagnostics(params)
marketDiags::fetchData(params)
library("RPostgreSQL")
marketDiags::fetchData(params)
params
params<-c('tab_vic','citibet','ladbrokes','2016-03-01','2017-04-01','Sha Tin','Hong Kong','THOROUGHBRED',1)
marketDiags::fetchData(params)
marketDiags::masterDiagnostics(params)
chiCollater<-function(data,params){
markets<-params[1:3]
markets<-markets[!is.na(markets)]
total<-length(markets)
ind<-params[length(params)]
print(ind)
x<-list()
for(i in 1:total){
res<-x$tables[[i]]<-chiSquareClassic(data,markets[i])
x$summary$chi[[i]]<-chiSquareTotal(res)
x$summary$rsq[[i]]<-marketCorrelation(data,markets[i],'pearson')
x$summary$spearman[[i]]<-marketCorrelation(data,markets[i],'spearman')
if(ind==0) x$summary$price_ranges[[i]]<-citibetTable(data,'tab_vic')
flush.console()
}
return(x)
}
masterDiagnostics<-function(params){
data<-fetchData(params)
res<-chiCollater(data,params)
return(res)
}
library(marketDiags)
marketDiags::masterDiagnostics(params)
params
library(marketDiags)
library(marketDiags)
marketDiags::masterDiagnostics(params)
library(marketDiags)
marketDiags::masterDiagnostics(params)
marketDiags::masterDiagnostics(params)
library(marketDiags)
marketDiags::masterDiagnostics(params)
library(marketDiags)
params<-c('tab_vic','citibet','ladbrokes','2016-03-01','2017-04-01',97,1)
marketDiags::masterDiagnostics(params)
params
library(marketDiags)
marketDiags::masterDiagnostics(params)
library(marketDiags)
marketDiags::masterDiagnostics(params)
library(marketDiags)
marketDiags::masterDiagnostics(params)
library(marketDiags)
marketDiags::masterDiagnostics(params)
library(marketDiags)
marketDiags::masterDiagnostics(params)
fetchData<-function(params){
library("RPostgreSQL")
markets<-params[1:3]
dfrom<-as.Date(params[4])
dto<-as.Date(params[5])
venue_id<-as.numeric(params[6])
con<-dwConnect()
host<-getHostName(venue_id)
x<-list()
t1<-marketQuery(markets[1])
t2<-marketQuery(markets[2])
t3<-marketQuery(markets[3])
host<-marketQuery(host,1)
dbQuery<-paste("Select meetings.id as meeting_id, events.id as event_id, event_competitors.id as event_competitor_id, competitors.id as competitor_id, trainers.id as trainer_id, venues.name as venue_name, meeting_date, countries.name as country_name, events.number as event_number, competitors.name as competitor_name, trainers.name as trainer_name,event_competitor_race_data.program_number ,event_competitor_race_data.barrier, event_competitor_race_data.finish_position, event_race_data.distance, event_race_data.race_class,
venue_types.name as venue_type_name, event_competitor_race_data.scratched as is_scratched,
(SELECT event_status_types.name FROM \"event_statuses\" inner join event_status_types on event_status_types.id = event_statuses.event_status_type_id WHERE \"event_statuses\".\"event_id\" = events.id  ORDER BY timestamp DESC LIMIT 1) as event_status,
",t1,",
",t2,",
",t3,",
",host,"
from meetings
left outer join venues on venues.id = meetings.venue_id
left outer join countries on countries.id = venues.country_id
left outer join venue_types on venue_types.id = venues.venue_type_id
left outer join events on events.meeting_id = meetings.id
left outer join event_competitors on event_competitors.event_id = events.id
left outer join competitors on event_competitors.competitor_id = competitors.id
left outer join event_competitor_race_data on event_competitor_race_data.id = event_competitors.event_competitor_race_datum_id
left outer join trainers on trainers.id = event_competitor_race_data.trainer_id
left outer join event_race_data on event_race_data.id = events.event_race_datum_id
WHERE meeting_date >= \'",dfrom,"\' and meeting_date <= \'",dto,"\' and venues.id = ",venue_id," and event_competitor_race_data.scratched = FALSE;",sep="")
x<-DBI::dbGetQuery(con,dbQuery)
x<-x[x$event_status=='CLOSED' | x$event_status=='FINAL',]
return(x)
}
library(marketDiags)
params
marketDiags::masterDiagnostics(params)
params
library(marketDiags)
marketDiags::masterDiagnostics(params)
library(marketDiags)
marketDiags::masterDiagnostics(params)
library(marketDiags)
marketDiags::masterDiagnostics(params)
params
grepl('citibet',params)
'citibet' %in% params
library(marketDiags)
'citibet' %in% params
marketDiags::masterDiagnostics(params)
library(marketDiags)
marketDiags::masterDiagnostics(params)
library(marketDiags)
marketDiags::fetchData()
params
params<-c('sportsbet','crownbet',NA,'2017-03-25','2017-03-31',205,1)
marketDiags::fetchData(params)
params<-c('sportsbet','crownbet',NA,'2017-03-25','2017-03-31',208,1)
marketDiags::fetchData(params)
x<-marketDiags::fetchData(params)
head(x)
y<-x[x$sportsbet>=2.0,]
head(y)
y<-x[x$sportsbet<=2.0,]
head(y)
x$sportsbet<-as.numeric(x4sportsbet)
x$sportsbet<-as.numeric(x$sportsbet)
head(x)
y<-x[x$sportsbet<=2.0,]
head(y)
chiSquareClassic<-function(data,market){
lows<-c(0.0000001,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5)
ups<-c(0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,0.5,1)
res<-as.data.frame(matrix(NA,length(lows),7))
colnames(res)<-c('Lower','Upper','N','W','Act','Exp','Chi')
data[,c(market)]<-as.numeric(data[,c(market)])
if(market=='citibet') market<-'citibet_price'
mkt<-as.numeric(data[,c(market)])
res$Lower<-lows
res$Upper<-ups
for(i in 1:nrow(res)){
u<-(1/res$Upper[i])
l<-(1/res$Lower[i])
filter<-mkt>=u & mkt<l & is.finite(mkt)
aa<-data[filter,]
bb<-aa[aa$finish_position==1 & is.finite(aa$finish_position),]
total<-res$N[i]<-nrow(aa)
w<-res$W[i]<-nrow(bb)
act<-res$Act[i]<-w/total
exp<-res$Exp[i]<-(1/mean(aa[,c(market)],na.rm=T))
res$Chi[i]<-((w-(exp)*total)^2)/(exp*total)
flush.console()
}
res<-res[order(-res$Lower),]
res$Lower<-round(res$Lower,2)
res_chi<-sum(res$Chi,na.rm=T)
colnames(res)<-tolower(colnames(res))
return(res)
}
chiSquareClassic(x,'sportsbet')
