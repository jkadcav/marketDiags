{
    "collab_server" : "",
    "contents" : "library(RPostgreSQL)\n\ndbHost<-\"52.64.224.248\" # public read replica, only accessible outside DW data center\ndbPort<-8000\nif (!is.na(Sys.getenv(\"IS_PRODUCTION\", NA))) {\n  # master, only accessible inside DW data center\n  dbHost<-\"dw-staging.cjza6pmqs6im.ap-southeast-2.rds.amazonaws.com\"\n  dbPort<-5432\n}\n\npg <- dbDriver(\"PostgreSQL\")\ncon<-dbConnect(pg, user=\"betia_staging\", password=\"poT5oT4Ayct0Eef5vin2Arb7owG3oo\",\n               host=dbHost, port=dbPort, dbname=\"dw_staging\")\n\n#' Allocates market type Tote/Fixed\n#'\n#' @keywords intraday\n#' @export\n#' @examples\n#'\ntypeAlloc<-function(market){\n  if(is.na(market)) return(NA)\n  else if(grepl('tab',market)) return('WIN')\n  else return('WIN FX')\n}\n\n#' Fetches data for Market Diagnostics\n#'\n#' @keywords intraday\n#' @export\n#' @examples\n#' fetchData(params) where params<-c(market_name,market_name,market_name,dfrom,dto,course,venue_type)\nfetchData<-function(params){\n\n  markets<-params[1:3]\n  print(markets)\n  dfrom<-as.Date(params[4])\n  dto<-as.Date(params[5])\n  venue<-params[6]\n  print(dfrom)\n  print(venue)\n  x<-list()\n\n  t1<-typeAlloc(markets[1])\n  t2<-typeAlloc(markets[2])\n  t3<-typeAlloc(markets[3])\n\n  x<-dbGetQuery(con,paste(\"Select meetings.id as meeting_id, events.id as event_id, event_competitors.id as event_competitor_id, competitors.id as competitor_id, trainers.id as trainer_id, venues.name as venue_name, meeting_date, countries.name as country_name, events.number as event_number, competitors.name as competitor_name, trainers.name as trainer_name,event_competitor_race_data.program_number ,event_competitor_race_data.barrier, event_competitor_race_data.finish_position, event_race_data.distance, event_race_data.race_class,\n                          venue_types.name as venue_type_name, event_competitor_race_data.scratched as is_scratched,\n                          (select market_json::json->'prices'->event_competitor_race_data.number-1 from markets where markets.provider = \\'\",markets[1],\"\\' and market_name = \\'\",t1,\"\\' and markets.meeting_id = meetings.id and markets.event_number = events.number limit 1) as \",markets[1],\",\n                          (select market_json::json->'prices'->event_competitor_race_data.number-1 from markets where markets.provider = \\'\",markets[2],\"\\' and market_name = \\'\",t2,\"\\' and markets.meeting_id = meetings.id and markets.event_number = events.number limit 1) as \",markets[2],\",\n                          (select market_json::json->'prices'->event_competitor_race_data.number-1 from markets where markets.provider = \\'\",markets[3],\"\\' and market_name = \\'\",t3,\"\\' and markets.meeting_id = meetings.id and markets.event_number = events.number limit 1) as \",markets[3],\"\n                          from meetings\n                          left outer join venues on venues.id = meetings.venue_id\n                          left outer join countries on countries.id = venues.country_id\n                          left outer join venue_types on venue_types.id = venues.venue_type_id\n                          left outer join events on events.meeting_id = meetings.id\n                          left outer join event_competitors on event_competitors.event_id = events.id\n                          left outer join competitors on event_competitors.competitor_id = competitors.id\n                          left outer join event_competitor_race_data on event_competitor_race_data.id = event_competitors.event_competitor_race_datum_id\n                          left outer join trainers on trainers.id = event_competitor_race_data.trainer_id\n                          left outer join event_race_data on event_race_data.id = events.event_race_datum_id\n                          WHERE venue_types.name = 'THOROUGHBRED' and countries.name = 'Australia' and meeting_date >= \\'\",dfrom,\"\\' and meeting_date <= \\'\",dto,\"\\' and venues.name = \\'\",venue,\"\\' and event_competitor_race_data.scratched = FALSE;\",sep=\"\"))\n  return(x)\n}\n\n\n#' Produces chi-square table\n#'\n#' @keywords chi-square\n#' @export\n#' @examples\n#' chiSquareClassic(data,'tab_vic')\nchiSquareClassic<-function(data,market){\n  lows<-c(0.0000001,0.1,0.2,0.3,0.4,0.5)\n  ups<-c(0.1,0.2,0.3,0.4,0.5,1)\n\n  res<-as.data.frame(matrix(NA,length(lows),6))\n  colnames(res)<-c('Lower','Upper','N','Act','Exp','Chi')\n\n  data[,c(market)]<-as.numeric(data[,c(market)])\n  mkt<-as.numeric(data[,c(market)])\n  res$Lower<-lows\n  res$Upper<-ups\n  for(i in 1:nrow(res)){\n    u<-(1/res$Upper[i])\n    l<-(1/res$Lower[i])\n    filter<-mkt>=u & mkt<l & is.finite(mkt)\n    aa<-data[filter,]\n    bb<-aa[aa$finish_position==1,]\n    res$N[i]<-nrow(aa)\n    act<-res$Act[i]<-nrow(bb)\n    #market<-\n    exp<-res$Exp[i]<-(1/mean(aa[,c(market)],na.rm=T))*nrow(aa)\n    res$Chi[i]<-((act-exp)^2)/exp\n    flush.console()\n  }\n  res$Lower<-round(res$Lower,1)\n  res_chi<-sum(res$Chi,na.rm=T)\n  return(res)\n}\n\n\n\nmasterDiagnostics<-function(params){\n  data<-fetchData(params)\n  res<-chiSquareClassic(data,params[1])\n  return(res)\n}\n",
    "created" : 1490224580097.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2251963411",
    "id" : "18615E67",
    "lastKnownWriteTime" : 1490311362,
    "last_content_update" : 1490311362,
    "path" : "~/Documents/xtrade/marketDiags/R/marketDiagnostics.R",
    "project_path" : "R/marketDiagnostics.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}